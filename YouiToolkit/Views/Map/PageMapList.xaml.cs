using Microsoft.Win32;
using System;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using YouiToolkit.Assist;
using YouiToolkit.Ctrls;
using YouiToolkit.Design;
using YouiToolkit.Logging;
using YouiToolkit.Models;
using YouiToolkit.Utils;
using YouiToolkit.ViewModels;

namespace YouiToolkit.Views
{
    public partial class PageMapList : UserControl
    {
        public PageMapList()
        {
            InitializeComponent();

            AssistManager.Dialog.PropertyChanged += (s, e) =>
            {
                if (e.PropertyName == nameof(ToolkitAssistDialog.MapList))
                {
                    DispatcherHelper.BeginInvoke(() => LoadMapList(e.NewValue as string[]));
                }
            };

            DataGridButtonGroupColumn.LoadingColumn += (s, e) =>
            {
                if (s is DataGridButtonGroupColumn column && column.DataGridOwner == dataGridMapList)
                {
                    e.Click += DataGridOperationButtonClick;
                }
            };

            buttonNew.Click += (s, e) =>
            {
                if (!AssistManager.CheckConnetced(this)) return;
                WindowDialog dialog = WindowDialog.Create<DialogControlMapNew>();
                WindowDialogResult result = dialog.ShowDialog(this);

                if (result != WindowDialogResult.OK)
                {
                    return;
                }

                if (dialog.Control is DialogControlMapNew control)
                {
                    string mapName = control.MapName;

                    Task.Run(() =>
                    {
                        AssistManager.Dialog.CallMappingCtrl(AssistCmdReqMappingCtrl.StartMapping, mapName, out AssistCmdRspMappingCtrlResult result, out _);

                        if (result == AssistCmdRspMappingCtrlResult.Success)
                        {
                            DispatcherHelper.BeginInvoke(() =>
                            {
                                MessageCenter.Publish(MessageToken.PageMapListOpCapture, mapName);
                            });
                        }
                        else
                        {
                            DispatcherHelper.BeginInvoke(() => MessageBoxX.Error(this, "新建地图失败，请稍后再试！"));
                        }
                    });
                }
            };

            buttonRefresh.Click += (s, e) =>
            {
                if (!AssistManager.CheckConnetced(this)) return;
                RefreshMapList();
            };

            dataGridMapList.AutoGeneratedColumns += (s, e) =>
            {
#if false
                foreach (DataGridColumn column in dataGridMapList.Columns)
                {
                }
#endif
            };

            IsVisibleChanged += (s, e) =>
            {
                if (IsVisible)
                {
                    if (DataContext is PageMapListViewModel vm)
                    {
                        if (vm.DataList.Count <= 0)
                        {
                            LoadMapList(AssistManager.Dialog.MapList);
                        }
                    }
                }
            };
        }

        public void Reload() => RefreshMapList();

        public void RefreshMapList()
        {
            Task.Run(() =>
            {
                bool result = AssistManager.Dialog.CallMappingList(out string[] mapList);

                if (mapList?.Length > 0)
                {
                    if (result)
                    {
                        Logger.Info($"[MapList] {mapList.Length} map got.\n{string.Join("\n", mapList)}");
                    }
                    DispatcherHelper.BeginInvoke(() =>
                    {
                        LoadMapList(mapList);
                    });
                }
            });
        }

        public void LoadMapList(string[] mapList)
        {
            if (mapList == null)
            {
                return;
            }
            if (DataContext is PageMapListViewModel vm)
            {
                vm.DataList.Clear();
                foreach (string mapName in mapList)
                {
                    vm.DataList.Add(new MapListModel(mapName));
                }
            }
        }

        public void DataGridOperationButtonClick(object sender, EventArgs e)
        {
            if (sender is Button button)
            {
                int index = button.TabIndex;
                MapListModel selectedItem = dataGridMapList.SelectedItem as MapListModel;
                string mapName = selectedItem?.Name;

                switch ((MapListOperation)index)
                {
                    case MapListOperation.Edit:
                        if (!AssistManager.CheckConnetced(this)) return;
                        if (SpinWaiter.SpinUntil(() => AssistManager.Status.MappingStatus == AssistCmdRspMappingStatus.Ready, 1000))
                        {
                            MessageCenter.Publish(MessageToken.PageMapListOpEdit, mapName);
                        }
                        else
                        {
                            MessageBoxX.Warning(this, "请稍后重新操作！", "系统繁忙");
                        }
                        break;
                    case MapListOperation.Capture:
                        if (!AssistManager.CheckConnetced(this)) return;
                        if (MessageBoxX.Question(this, "重复录制地图将会覆盖原有地图，确定要覆盖地图吗？", "录制地图") == MessageBoxResult.Yes)
                        {
                            Task.Run(() =>
                            {
                                AssistManager.Dialog.CallMappingCtrl(AssistCmdReqMappingCtrl.StartMapping, mapName, out AssistCmdRspMappingCtrlResult result, out _);

                                if (result == AssistCmdRspMappingCtrlResult.Success)
                                {
                                    DispatcherHelper.BeginInvoke(() =>
                                    {
                                        MessageCenter.Publish(MessageToken.PageMapListOpCapture, mapName);
                                    });
                                }
                                else
                                {
                                    DispatcherHelper.BeginInvoke(() => MessageBoxX.Error(this, "新建地图失败，请稍后再试！"));
                                }
                            });
                        }
                        break;
                    case MapListOperation.ExportMap:
                        if (!AssistManager.CheckConnetced(this)) return;
                        SaveFileDialog saveFileDialog = new SaveFileDialog()
                        {
                            RestoreDirectory = true,
                            DefaultExt = "*.png;",
                            FileName = $"{mapName}.png",
                            Filter = "PNG(*.png)|*.png",
                        };
                        if (saveFileDialog.ShowDialog() ?? false)
                        {
                            IPendingHandler handler = PendingBox.Show(this, "正在导出地图");
                            Task.Run(() =>
                            {
                                AssistManager.Status.LidarPointCloud.ExportMapPriorPath = saveFileDialog.FileName;
                                AssistManager.Dialog.RequestExportPointCloudPrior(mapName);

                                SpinWaiter.SpinUntil(() =>
                                {
                                    return string.IsNullOrEmpty(AssistManager.Status.LidarPointCloud.ExportMapPriorPath);
                                });
                                DispatcherHelper.Invoke(() =>
                                {
                                    handler.Close();
                                    Toast.Success(this, "导出地图成功", ToastLocation.TopCenter);
                                });
                            });
                        }
                        break;
                    case MapListOperation.Remove:
                        if (!AssistManager.CheckConnetced(this)) return;
                        if (MessageBoxX.Question(this, $"确定要删除地图{mapName}吗？", "删除地图") == MessageBoxResult.Yes)
                        {
                            Task.Run(() =>
                            {
                                _ = AssistManager.Dialog.CallMappingCtrl(AssistCmdReqMappingCtrl.RemoveMapping, mapName, out AssistCmdRspMappingCtrlResult result, out _);

                                if (result == AssistCmdRspMappingCtrlResult.Success)
                                {
                                    DispatcherHelper.BeginInvoke(() => Toast.Success(this, "删除地图成功", ToastLocation.TopCenter));
                                    _ = AssistManager.Dialog.CallMappingList(out _);
                                }
                                else
                                {
                                    DispatcherHelper.BeginInvoke(() => MessageBoxX.Error(this, $"地图{mapName}删除失败，请稍后再试！"));
                                }
                            });
                        }
                        break;
                }
            }
        }
    }
}
